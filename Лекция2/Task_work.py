# list_1 = []
# list_1 = list()
# list_1 = [1, 2, 3, 8]
# print(*list_1)
# # * - открывает списки, убирает квадратные скобки из печати
# for i in list_1:
#     print(i)
#     print(len(list_1))
#     print(list_1[-1]) # -1 - выводит данные с конца

# list_2 = [1, 5]
# print(list_2)
# list_2.append(8)
# print(list_2)
# list_2.append(85)
# print(list_2)

# list_1 = []
# for i in range(5):
#     list_1.append(i)
#     print(list_1)

# list_1 = [2, 8, 9, -7, 6]
# print(list_1.pop()) # pop(0) - удаляет номер  элемента в списке
# print(list_1.insert(2,11)) # insert (2 - это позиция элемента, 11 - это чсило которе нужно вставить)
# print(list_1)

# print(list_1[:]) # : В квадратных скобках показывает какие элементы небходимо выводить. Если не перед : ни после не стоят числаБ то выводим весть список,
#                     # если число стоит после : ([:2]) выводим до этого элемента по счету
                    # если число стоит до : ([2:]) вывводим начиная с этого элемента
                    # [::3] - означает сначала до конца с шагом 3

# кортеж - не меняемый список!! занимает меньше места
# t = ()
# print(type(t))

# t = (11,)
# print(type(t))

# v= [1, 2, 8]
# print(type(v))

# v = tuple(v)
# print(type(v))

# a,b,c = v
# print(a,b,c)

# t = (1, 2, 3, 5,)
# print(t[1])
# for i in t:
#     print(i)
# for i in range(len(t)):
#     print(t[i])
    
# t[0] = 2 -ОШИБКА!!!

# СЛОВАРИ - это не упорядоченые коллекции произвольных объектов с доступом по ключу!
# В списке в качестве ключа испульзуется индекс элементаю
# В СЛОВАРЕ для определения элемента используется значение ключа(строка, число)

# di = {}
# di = dict()
# di ['q'] = 'qwerty'
# print(di)
# di ['w'] = 'werty'
# print(di)
# print(di['q'])
#при вводе данных можно сразу указывать ключ и значение {'h' : 'hi'} - где 'h' - это ключ, а 'hi' - это значение
# функция del -  удаляет ключ из словаря
# for item in di:
#     print(item)
#     print('{}: {}'.format(item, di[item]))

# for (k,v) in di.items():
#     print(k,v)

# print(di.items())


# МНОЖЕСТВА - содержат в себе уникальные элементы, не обязательно упорядоченныею
# Одно множество может содержать значения любых типов.
# Если у вас есть два множества, над ними можно совершать любые стандартные операции
# Например: объединение, перечесление и разность.

# colors = {'red', 'green', 'blue'}
# print(colors)
# colors.add('red') # add -  добавляет элемент во множество
# colors.add('gray')
# print(colors)
# remove - удаляет конкретное значение из множества
# discart -  так же удаляет значение из множестваБ но снача проверяет есть ли оно
# если такого значения нет, то просто пропускает его
# clear - удаляет все значения множества
# set() - создает новое множество

# a = {1, 2, 3, 5}
# b = {2, 5, 6, 8, 12, 23}
# c = a.copy() # сопирует множество
# u = a.union(b) # объеденияет начения двух множеств, выводит уникальные значения обоих множеств
# i = a.intersection(b) # находит пересечения множеств, т.е. одинаковые значения в обоих множествах
# dl = a.difference(b) # вычитает все одинаковые элементы вторго, оствляя только унакльные значения первого
# dr = b.difference(a)
# q = a.union(b).difference(a.intersection(b))
# print(q) # 


a = {1, 2, 8}
b = frozenset(a)
print(b)

# Гениратор списков! List comprehension
# list_1 = [exp for item in iterable] - добавляем значение идя по item для коллекции данных
# list_1 = [exp for item in iterable(if conditional)] - выбока по условию if

list_1 = []
for i in range(1, 100):
    list_1.append(i)
print(list_1)

list_1 = [i for i in range(1, 100)]
print(list_1)

list_1 = [i for i in range(1, 100) if i % 2 == 0]
print(list_1)

list_1 = [(i, i) for i in range(1, 100) if i % 2 == 0] #печать кортежаБ создание павы каждому числу
print(list_1)

list_1 = [i * 2 for i in range(10) if i % 2 == 0] # можно так же множать, делить, прибавлять и вычитать
print(list_1)